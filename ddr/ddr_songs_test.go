package ddr

import (
	"bytes"
	"fmt"
	"github.com/PuerkitoBio/goquery"
	"github.com/chris-sg/eagate/util"
	"github.com/chris-sg/eagate_models/ddr_models"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func documentFromFile(file string) (document *goquery.Document, err error) {
	fileContents, err := ioutil.ReadFile(file)
	if err != nil {
		return
	}
	reader := bytes.NewReader(fileContents)
	document, err = goquery.NewDocumentFromReader(reader)
	return
}

func testServerAndClient(uriMapping map[string]string) (util.EaClient, *httptest.Server) {
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	}))
	client := util.GenerateClient()
	client.SetTestClient(ts, uriMapping)

	return client, ts
}

func TestPageCountFromMusicDataDocument(t *testing.T) {
	// Setup test
	const testFile = "./test_data/music_data_single/music_data_single_0.html"
	const expectedPageCount = 3

	// Run Test
	document, err := documentFromFile(testFile)
	if err != nil {
		t.Fatalf("could not load %s: %s", testFile, err.Error())
	}

	pageCount := pageCountFromMusicDataDocument(document)
	if pageCount != expectedPageCount {
		t.Errorf("expected a page count of %d, got %d", expectedPageCount, pageCount)
	}
}

func TestSongIdsFromMusicDataDocument(t *testing.T) {

}

func TestSongIdsForClient(t *testing.T) {
	// Setup test
	const musicDataSingleDir = "./test_data/music_data_single"
	const musicDataSingleUri = "https://p.eagate.573.jp/game/ddr/ddra20/p/playdata/music_data_single.html?offset={page}&filter=0&filtertype=0&sorttype=0"
	uriMapping := make(map[string]string)
	files, err := ioutil.ReadDir(musicDataSingleDir)
	if err != nil {
		t.Fatalf("failed to load file list from dir %s", musicDataSingleDir)
	}
	for i, file := range files {
		uri := strings.Replace(musicDataSingleUri, "{page}", fmt.Sprintf("%d", i), -1)
		uriMapping[uri] = fmt.Sprintf("%s/%s", musicDataSingleDir, file.Name())
	}

	c, s := testServerAndClient(uriMapping)
	defer s.Close()

	// Setup expected results

	expectedSongIds := []string{
		"QPd01OQqbOIiDoO1dbdo1IIbb60bqPdl", "OboID1PloIIoOOObQdQOP110I61Ddl9I", "918oPDQDoPlD1OlqlqQI08I6dD9iqoil", "16bl8D8lOddP9Obq0OIlOI6q8Pi1l9O0", "06O0ObdQobq86lPDo6P18dQ1QPdilIQO",
		"d0DDd1dP6llPbioqPdiQ0IDd918bDqI8", "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo", "1d9lDIl6iiiD0D0d8qd6dlDlq6P8o0QI", "Oq900IIl1Ob8qoIPqDP0PD6blbqIqlP1", "61oIP0QIlO90d18ObDP1Dii6PoIQoOD8",
		"ibI0QllidqQ089ql8dob6bIoodbbIoqq", "16IqQ680IioldO69QD61liQod0DQ8boQ", "bd8oD0iqDQ8Qobd1oIqi8981QbD6I6Iq", "80PdqQ0iiOQb9i91lIliodiO9PI8O609", "oQolO9oOO01ll0I8969i8O1IQliloDqP",
		"lqI8DD9Plq6IO8P8P6Pl8Di98DlI9oP8", "9I00D9Id61iD6QP8i8Dd6698PoQ9bdi9", "ilD80b8QQl9Qo0PP0lQ00b8bO9Oqoobo", "i91q8l0bbi8qll000ob6qDiQP891iiql", "qdQoQli1d8DP0Obb919I6P1Odilib1Dd",
		"I96dOqqqQIi9oiqbqDPbQ8I8PQbqOb1o", "oPP1Pdl6Qdlb8oq10PP1doDibdbbl9bl", "0Ib6qIb0iPOoQqqDIl90dP0PI0o9QlDd", "l9lq19DdiD8qQPoPOlboi1qQii0IQI86", "qIqqdd1Odqi1Iiolq9qqPOi0bPPld8Pb",
		"l1lO999PqIboPQOD86PDQo1ol1iIiiOi", "ql1Q8P100IIlbl0Pdi08I8qD900idqQq", "id1lodDbo0Iq9088Qd19d1OlDPP01D8o", "i89IO1PPOl0boOol0bQI19Q9liQ0l6O1", "QIDd80o0OqobODP00ldQ1D9dl81qQi0d",
		"QoDQ0oq08QqiI0DQ8dIPb10qIi6d6i89", "8Q8OiP8QPbl8bqID1loQq896ldPQd99o", "q6iD8idqo69qIPl00IQidoq1o1o1d1b9", "16oDDIlP8bIODQ6Ql0881d9Qqdb19b98", "IbDoODD9qb66Iqd6DbOQiOoDll1DqiO9",
		"Pd1d96Q91oiboqb86DdddD68dbq81Pdo", "qiDOD0iidOli9l0qbP6IbOD19OQ8D8Po", "QlID98Ddoi6O8lP8IQd6iid610011l60", "I1qd16dPdqPi96ql0lP10OQDbo11D89P", "Q9Q088PPd0bPi9QQ8iil1lQqPdiQP69D",
		"i9il1DIDl91Db0OdllOddIqO600Pl89q", "qilOP8l6bDPi98lqDbO6O1obOi068QOQ", "bo9l0Dl0PbqQQQ16Qq6bOOi68o0996Pq", "qbbPQoqqqiPd98d61P0qDd0iDId6OqoQ", "9idOOIdDO01D8PO06bOPPbOIOoiQ8O0P",
		"O9qDQOQO8dDDIiO9dPP0Pb8qQo9l89D9", "911lId0IooIOq1oDPoQ0iQiDiOIbd6oo", "doIiQl6oDPP6i9qobqoobblPQqPiI9bD", "1P9bqO00bIQ0q8d1Q80l0Dq8oi6boqb0", "D11ldIqD8dQIi9oQQIIo86QOI8D9olP8",
		"oQ8oqddQOObiq0ldo68i1d6o1IidObi6", "OoQoQIP06Doq1d88dDQQdlQ8i68Do9DO", "0d8Q9I86lo8oDlQiPd81ll66ob0qli89", "6dO6i9qq601D8ild9QIlbO8bodbiQ1Pl", "lIlold9IQbDb0d6IdP6600DOQIDb9dOP",
		"DIiQbd09D0PoIiPl9iP1q8qldOOqol8i", "dlqPb1iqPo81qI89816QIoi01b1b0P06", "qoidddb08iIoDOo9DQoO0loPl8lPQ81o", "PldO10PIiQ6lOiI16o060OQIiq69QO96", "80d8obPdlobP9qlqiDb01999o01q6DdP",
		"ibI69PPO1iP0D1IlI0bb11QOq6081POo", "666ObIO9bO8D8q8q08I1OQo96DdIbbiO", "ld8lOqloqD6lOl880ldDo819bDb9q1Qi", "I8diIQiPO90qDD60oQ0o669I99dI69DD", "IQ0ID09qD6O1oOdIq0oilI8I8l9DlP9b",
		"bq8DOQ9Idq9Ii9PQ1bqPIQoQPl961d1o", "D0Qb898oqblPoP68PPq1o9i9dI9o0D9i", "9obIQOP8O1l0PQ0Oi1oPQI198o0Pd81o", "P869didbP8Q69IQ0dIqo1ibOb0bb99Q1", "Q9l0i6DPO08obldq101ldDioiqdIDqlq",
		"I8lidoibqQqoQOqiDi6QiDbP9DIdd989", "P8DoiO0QO6Qb8iiP9D1IQ080lQQPD6ll", "DDDiQOd1IQQ6QIIq09PDqdQdDIll6bQI", "POoldOddQl9Dbq8b6iOP0iPoQd6IdOPl", "I9iODl9bl1d8PilOilii9Dd19PP6QI66",
		"biqbD9I9q9D16i0i1Idb9d111l1QDq86", "91dD6iqPO066do99169POPbQPbo9o6oq", "lIQ1608o9O6bdoPO0ooi8io8i6q6bO1b", "iQP6PI8oDQi1OPQObDQO1IIP9I8i0I1o", "P66d8iQQIIQO96qoDdIqi9l19i69D9Dq",
		"Q96Qo0qbQ81odQoqPOOQ98oDbo6Pb1IO", "lQ86Pod1b9oI8OiDDoId099di9OI8d9I", "D68PQib86POo9D6O8Q0qO8bD6bDb1bdl", "OQbPdOIo6dPPIq6d8qid6DbPP0q991i6", "QoODOoqDli0bOoqqDo8ODo1lDI9llblo",
		"Dlq6qdP1bOPDObbbQQ6b8iPbd1ODq69P", "QoId0biOD18610ii0DDP61QqOl6qq86q", "oDQqbI86bdlqbiO1dbiDP0PDd91bI6iP", "q1qI0QibDDP6oPdl8DlIlPo80DqDd66P", "II8Dlo69PoPOII9P88qdlQPP8I61DlDo",
		"liq91ddlPQ16iooqDDQ86qlodIO10Qb1", "q0QIob1PDI6IP86dlPb6I6il9d6bP606", "Pi69o0idP1obO9QDqIDbPdqlb90q8Dq8", "iIPq9q8PQDDObo610oQoi0ob96PDi8li", "Io1D1l9QiDo6IDObd8qo1Q9lQ6iollQ9",
		"Dl690bPIlIq0Ol1PdPbb9QO0I66lIqO0", "P160qOD09PQoOPI6iIOO69qDoqQl1qDQ", "oOOI98q81oQQQP88d6Q6qlbl8QI9d0dI", "lO8O011qIqioPDi9d0oib09DDDPIbqOI", "QlQ9Qb00bI0ob9oDIiPqO1QdQ0o6O0O6",
		"l1bDOIlb6ddI6od0q1llI0I6blq9oP0l", "6doo1dQ16Ol86oIbQ19PPldI8lIbP0OI", "6iq1dqQ1PDQlDO0bio0l89oDDDi6b0oD", "Q86b6I1Qi6Q918l6iOoOQl866oQoIQOi", "668Q8qQdqoIQQiIQOilDqd8lDOOQ8bDQ",
		"ibdIdIO60b880i8oPOdQD9qIqldOdDl8", "D16P668Q8loqIoDo1IdoIlIloiIoIDll", "160Oo1q8DolI6068lQi66OQbQ9Q8ODQI", "1Q809666i9oblO8qO688OiD6OIbiP0Oq", "1qdb8P8il9li6DOdPolq9d0d9Q6898oi",
		"Ibd8d0bllqOo61lqlQPd8lP01D0Qb9o6", "I6Dd0QIi086il1918dQI6dq0l1d9ibD0", "Qb1db18qP1Ib6liPI1668Pq8QPb0QO09", "0Qb8PDoQ06Q66obPI1P988oI61ioPb6l", "oOI18qilo91qPQl9Q0l9iliO96Pi6DIi",
		"i8O81i0iQdqiI8qqP0oo8IPl9IoId1bO", "id0QqdbI8oloO9l08IqI9q1D0819OQID", "dDlDPddq08iD8IOb9I1PbODP9696966D", "qD6P1ldl09Dqq8QP01bbid0b9IdqobPl", "ObbOibP0ll9I00di6i9oO1qlIQbdD0ql",
		"PqOilI0ql6QDID6oo0Qb9iDo1doqQqPQ", "I0qiD6Ob86D1oQOib81lID6Dll8iOOOP", "dP88i6I9b9QPQDPPO90POOIo0Il6QloI", "DoQi6oPoD9DlO0898oo0ol0qoo6891Db", "0ddPq801D8PiiqO1oqoQbdOIQ9lQl11o",
		"8i9llqdbQ6qP611I90lldPq1o1oQl69o", "PloPqd6Q19Q990dl16I0Qi06i0l8o168", "dOblQOoDb96l00dqPlIb9DQl86q9PboI", "96d9qiDD8l09DQq6O1DO6O6I1IdP8q0D", "Dl69Pb9OQDlbOi80OQdIObiQ1Q08Dlqo",
		"06DO8bb0O891IQ9QP01diqOOl0D80QbO", "D686d06lO9IID8D0boPq0Pd8P89idO99", "811o6o1QPP0lPiolI1ObiD99l08o1dQl", "DQO6qbiP6dldo6IIqlob9i8dqiqOio6o", "iqiqod1l08DlDql98QOi10oibldd8b86",
		"db1DlQ9qqI8PiqPD6q88O1P8PDbP11dq", "Qq6D900bD60PddqqbdQb96Pd60918100", "I6q1PQ1D1Dblli8Iilo9ood8DbbQlb8O", "b9QiIQ18b6o1bqPdqI6lI1OIqboPIDI9", "1dq6Oq918dIQb1doqQdbiPPPO9lIdl0P",
		"Q8Q6d00DoIiPolOb9PIO0Pll96O0I1qD", "od66Qb16lI019I06lllII811I9ol6l0i", "OoqbDO180q18oqi1ooO1QIdOoOPl69b1", "0bDqIO9Q0PPIPlPll1D8Pbol9O6DlPdb", "D08qoOdPd8iOO916bOPIIIdqPP6O00iP",
		"D08lqQOPdOO6D6ll690Qd6PdbO111011", "oQ9QDQ6I9oo9DP8Oi86id61o9Pbbl9bD", "QQOOldqQ8QQDQ06i81d9DP9PlOlo1lqq", "o91qiqqDi9b6d6l1dQ6qO6oO0QDIlPql", "91qD6DbDqi96qbIO66oboliPD8IPP6io",
	}

	// Run test
	songIds, err := SongIdsForClient(c)
	if len(songIds) != len(expectedSongIds) {
		t.Errorf("song id count did not match: expected %d but got %d", len(expectedSongIds), len(songIds))
	}
	for i, _ := range songIds {
		found := false
		for j, _ := range expectedSongIds {
			if songIds[i] == expectedSongIds[j] {
				found = true
				break
			}
		}
		if !found {
			t.Errorf("song id %s was not found in expectedSongIds", songIds[i])
		}
	}
}

func TestSongDataFromDocument(t *testing.T) {
	// Setup test
	const testFile = "./test_data/music_detail/1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9.html"
	const testId = "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9"

	// Setup expected results
	expectedSongData := ddr_models.Song{
		Id:           testId,
		Name:         "printemps",
		Artist:       "Qrispy Joybox",
		Image:        "",
	}

	// Run Test
	document, err := documentFromFile(testFile)
	if err != nil {
		t.Fatalf("could not load %s: %s", testFile, err.Error())
	}

	songData := songDataFromDocument(document, testId)
	if  songData.Id != expectedSongData.Id ||
		songData.Name != expectedSongData.Name ||
		songData.Artist != expectedSongData.Artist ||
		songData.Image != expectedSongData.Image {
		t.Errorf("song data for song %s did not match expected data of %+#v got %+#v", testId, expectedSongData, songData)
	}
}

func TestSongDataForClient(t *testing.T) {
	// Setup test
	const musicDetailDir = "./test_data/music_detail"
	const musicDetailUri = "https://p.eagate.573.jp/game/ddr/ddra20/p/playdata/music_detail.html?index={songid}"
	songIds := make([]string, 0)
	uriMapping := make(map[string]string)
	files, err := ioutil.ReadDir(musicDetailDir)
	if err != nil {
		t.Fatalf("failed to load file list from dir %s", musicDetailDir)
	}
	for _, file := range files {
		separator := strings.Index(file.Name(), ".")
		uri := strings.Replace(musicDetailUri, "{songid}", file.Name()[:separator], -1)
		songIds = append(songIds, file.Name()[:separator])
		uriMapping[uri] = fmt.Sprintf("%s/%s", musicDetailDir, file.Name())
	}

	c, s := testServerAndClient(uriMapping)
	defer s.Close()

	// Setup expected results
	expectedSongData := []ddr_models.Song {
		{
			Id:           "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Name:         "printemps",
			Artist:       "Qrispy Joybox",
			Image:        "",

		},
		{
			Id:			  "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Name:         "アルストロメリア (walk with you remix)",
			Artist:       "TAG",
			Image:        "",
		},
	}

	songData, err := SongDataForClient(c, songIds)
	if err != nil {
		t.Fatal("error loading song data for client")
	}

	for _, data := range songData {
		found := false
		for _, expectedData := range expectedSongData {
			if  data.Id == expectedData.Id &&
				data.Name == expectedData.Name &&
				data.Artist == expectedData.Artist &&
				data.Image == expectedData.Image {
				found = true
				break
			}
		}
		if !found {
			t.Errorf("song data for song %s did not match any expected: got %+#v", data.Id, data)
		}
	}
}

func TestSongDifficultiesFromDocument(t *testing.T) {
	// Setup test
	const testFile = "./test_data/music_detail/1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9.html"
	const testId = "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9"

	// Setup expected results
	expectedSongDifficulties := []ddr_models.SongDifficulty{
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "BEGINNER",
			DifficultyValue: 3,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "BASIC",
			DifficultyValue: 6,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "DIFFICULT",
			DifficultyValue: 10,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "EXPERT",
			DifficultyValue: 13,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "CHALLENGE",
			DifficultyValue: -1,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "BASIC",
			DifficultyValue: 6,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "DIFFICULT",
			DifficultyValue: 10,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "EXPERT",
			DifficultyValue: 14,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "CHALLENGE",
			DifficultyValue: -1,
		},
	}

	// Run Test
	document, err := documentFromFile(testFile)
	if err != nil {
		t.Fatalf("could not load %s: %s", testFile, err.Error())
	}

	songDifficulties := songDifficultiesFromDocument(document, testId)

	for _, data := range songDifficulties {
		found := false
		for _, expectedData := range expectedSongDifficulties {
			if  data.SongId == expectedData.SongId &&
				data.Difficulty == expectedData.Difficulty &&
				data.Mode == expectedData.Mode &&
				data.DifficultyValue == expectedData.DifficultyValue {
				found = true
				break
			}
		}
		if !found {
			t.Errorf("song data for song %s did not match any expected, got: %+#v", data.SongId, data)
		}
	}
}

func TestSongDifficultiesForClient(t *testing.T) {
	// Setup test
	const musicDetailDir = "./test_data/music_detail"
	const musicDetailUri = "https://p.eagate.573.jp/game/ddr/ddra20/p/playdata/music_detail.html?index={songid}"
	songIds := make([]string, 0)
	uriMapping := make(map[string]string)
	files, err := ioutil.ReadDir(musicDetailDir)
	if err != nil {
		t.Fatalf("failed to load file list from dir %s", musicDetailDir)
	}
	for _, file := range files {
		separator := strings.Index(file.Name(), ".")
		uri := strings.Replace(musicDetailUri, "{songid}", file.Name()[:separator], -1)
		songIds = append(songIds, file.Name()[:separator])
		uriMapping[uri] = fmt.Sprintf("%s/%s", musicDetailDir, file.Name())
	}

	c, s := testServerAndClient(uriMapping)
	defer s.Close()

	// Setup expected results
	expectedSongDifficulties := []ddr_models.SongDifficulty{
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "BEGINNER",
			DifficultyValue: 3,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "BASIC",
			DifficultyValue: 6,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "DIFFICULT",
			DifficultyValue: 10,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "EXPERT",
			DifficultyValue: 13,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "SINGLE",
			Difficulty:      "CHALLENGE",
			DifficultyValue: -1,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "BASIC",
			DifficultyValue: 6,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "DIFFICULT",
			DifficultyValue: 10,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "EXPERT",
			DifficultyValue: 14,
		},
		{
			SongId:          "1PoOQPd0D01Q9O0doiQQQ8D8Q096bDq9",
			Mode:            "DOUBLE",
			Difficulty:      "CHALLENGE",
			DifficultyValue: -1,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "SINGLE",
			Difficulty:      "BEGINNER",
			DifficultyValue: 3,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "SINGLE",
			Difficulty:      "BASIC",
			DifficultyValue: 6,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "SINGLE",
			Difficulty:      "DIFFICULT",
			DifficultyValue: 8,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "SINGLE",
			Difficulty:      "EXPERT",
			DifficultyValue: 11,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "SINGLE",
			Difficulty:      "CHALLENGE",
			DifficultyValue: 13,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "DOUBLE",
			Difficulty:      "BASIC",
			DifficultyValue: 6,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "DOUBLE",
			Difficulty:      "DIFFICULT",
			DifficultyValue: 8,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "DOUBLE",
			Difficulty:      "EXPERT",
			DifficultyValue: 12,
		},
		{
			SongId:          "8bQQ0lP96186D8Ibo8IoOd6o16qioiIo",
			Mode:            "DOUBLE",
			Difficulty:      "CHALLENGE",
			DifficultyValue: 13,
		},
	}

	songDifficulties, err := SongDifficultiesForClient(c, songIds)
	if err != nil {
		t.Fatal("error loading song difficulties for client")
	}

	for _, data := range songDifficulties {
		found := false
		for _, expectedData := range expectedSongDifficulties {
			if  data.SongId == expectedData.SongId &&
				data.Difficulty == expectedData.Difficulty &&
				data.Mode == expectedData.Mode &&
				data.DifficultyValue == expectedData.DifficultyValue {
				found = true
				break
			}
		}
		if !found {
			t.Errorf("song data for song %s did not match any expected, got: %+#v", data.SongId, data)
		}
	}
}